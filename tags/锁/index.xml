<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>锁 on jiayuan&#39;s Blog</title>
    <link>/tags/%E9%94%81/</link>
    <description>Recent content in 锁 on jiayuan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jun 2024 00:00:00 +0800</lastBuildDate><atom:link href="/tags/%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>InnoDB加锁分析</title>
      <link>/posts/innodb-lock/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0800</pubDate>
      
      <guid>/posts/innodb-lock/</guid>
      <description>加锁规则 MySQL实战45讲总结的规则(5.x版本，规则可能会变化) 两个“原则”、两个“优化”和一个“bug”：
原则 1：加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。
原则 2：查找过程中访问到的对象才会加锁。
优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。
优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。
一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。
其他参考 不同语句加锁
MySQL8 performance_schema.data_locks;
InnoDB 等值查询加锁分析 仅分析等值查询，范围查询比较复杂
索引：唯一索引/非唯一索引 隔离级别：RR/RC 是否有符合条件的行：是/否 唯一索引 表结构
create table t ( id int not null, uid int not null, val int not null, primary key (id), unique key uk_uid (uid) ) engine = innodb; insert into t values (5, 5, 5), (10, 10, 10), (15, 15, 15), (20, 20, 20); RR隔离级别 命中行 begin; select * from t where uid = 5 for update;</description>
      <content>&lt;h1 id=&#34;加锁规则&#34;&gt;加锁规则&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;MySQL实战45讲总结的规则(5.x版本，规则可能会变化)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个“原则”、两个“优化”和一个“bug”：&lt;/p&gt;
&lt;p&gt;原则 1：加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。&lt;/p&gt;
&lt;p&gt;原则 2：查找过程中访问到的对象才会加锁。&lt;/p&gt;
&lt;p&gt;优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。&lt;/p&gt;
&lt;p&gt;优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。&lt;/p&gt;
&lt;p&gt;一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他参考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html&#34;&gt;不同语句加锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL8 performance_schema.data_locks;&lt;/p&gt;
&lt;h1 id=&#34;innodb-等值查询加锁分析&#34;&gt;InnoDB 等值查询加锁分析&lt;/h1&gt;
&lt;p&gt;仅分析等值查询，范围查询比较复杂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引：唯一索引/非唯一索引&lt;/li&gt;
&lt;li&gt;隔离级别：RR/RC&lt;/li&gt;
&lt;li&gt;是否有符合条件的行：是/否&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;唯一索引&#34;&gt;唯一索引&lt;/h2&gt;
&lt;p&gt;表结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create table t (
 id int not null,
 uid int not null,
 val int not null,
 primary key (id),
 unique key uk_uid (uid)
) engine = innodb;

insert into t values (5, 5, 5), (10, 10, 10), (15, 15, 15), (20, 20, 20);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;rr隔离级别&#34;&gt;RR隔离级别&lt;/h3&gt;
&lt;h4 id=&#34;命中行&#34;&gt;命中行&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;begin; select * from t where uid = 5 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;仅对记录5加锁&lt;/p&gt;
&lt;h4 id=&#34;未命中行&#34;&gt;未命中行&lt;/h4&gt;
&lt;p&gt;session1 &lt;code&gt;begin; select * from t where uid = 13 for update;&lt;/code&gt;
锁(10, 15) 的gap，没有行锁&lt;/p&gt;
&lt;h3 id=&#34;rc隔离级别&#34;&gt;RC隔离级别&lt;/h3&gt;
&lt;h4 id=&#34;命中行-1&#34;&gt;命中行&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;begin; select * from t where uid = 5 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;仅对记录5加锁&lt;/p&gt;
&lt;h4 id=&#34;未命中行-1&#34;&gt;未命中行&lt;/h4&gt;
&lt;p&gt;session1 &lt;code&gt;begin; select * from t where uid = 13 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;session1 没有gap lock，没有行锁&lt;/p&gt;
&lt;p&gt;session2 可以插入任意间隙，可以更新已有记录&lt;/p&gt;
&lt;h2 id=&#34;非唯一索引&#34;&gt;非唯一索引&lt;/h2&gt;
&lt;p&gt;表结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create table t (
 id int not null,
 uid int not null,
 val int not null,
 primary key (id),
 key idx_uid (uid)
) engine = innodb;

insert into t values (5, 5, 5), (10, 10, 10), (15, 15, 15), (20, 20, 20), (24, 20, 20), (28, 20, 20), (40, 40, 40);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;rr隔离级别-1&#34;&gt;RR隔离级别&lt;/h3&gt;
&lt;h4 id=&#34;命中行-2&#34;&gt;命中行&lt;/h4&gt;
&lt;p&gt;session 1 &lt;code&gt;begin; select * from t where uid = 20 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;锁(20, 40) 的gap&lt;/p&gt;
&lt;p&gt;3个uid=20的行锁&lt;/p&gt;
&lt;h4 id=&#34;未命中行-2&#34;&gt;未命中行&lt;/h4&gt;
&lt;p&gt;session 1 &lt;code&gt;begin; select * from t where uid = 18 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;锁(15, 20(id=20))的 gap，可以插入(21, 20, 20)，不能插入(19, 20, 20)，注意非唯一索引，同一个索引值之间的间隙与主键id相关&lt;/p&gt;
&lt;p&gt;uid=20(id=20)不需要加行锁&lt;/p&gt;
&lt;h3 id=&#34;rc隔离级别-1&#34;&gt;RC隔离级别&lt;/h3&gt;
&lt;h4 id=&#34;命中行-3&#34;&gt;命中行&lt;/h4&gt;
&lt;p&gt;session 1 &lt;code&gt;begin; select * from t where uid = 20 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只加uid=20行锁&lt;/p&gt;
&lt;h4 id=&#34;未命中行-3&#34;&gt;未命中行&lt;/h4&gt;
&lt;p&gt;session 1 &lt;code&gt;begin; select * from t where uid = 18 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不加锁&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;RR级别需要加gap lock，gap lock加record lock称作next-key lock&lt;/p&gt;
&lt;p&gt;RC不需要加gap lock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RR隔离级别（等值查询）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一索引
&lt;ul&gt;
&lt;li&gt;命中时，锁命中的一条记录&lt;/li&gt;
&lt;li&gt;未命中，锁间隙，下一条记录无需加行锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非唯一索引
&lt;ul&gt;
&lt;li&gt;命中时，锁间隙，锁符合条件的记录行锁&lt;/li&gt;
&lt;li&gt;未命中时，锁间隙，下一条无需加行锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RC隔离级别（等值查询）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一索引
&lt;ul&gt;
&lt;li&gt;命中时，锁命中的一条记录&lt;/li&gt;
&lt;li&gt;未命中时，无需加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非唯一索引
&lt;ul&gt;
&lt;li&gt;命中时，锁命中的记录&lt;/li&gt;
&lt;li&gt;未命中时，无需加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何验证锁相关问题&#34;&gt;如何验证锁相关问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB update未命中索引时，RR级别是否锁全表？
&lt;ul&gt;
&lt;li&gt;实际上是扫描主键，逐行加锁&lt;/li&gt;
&lt;li&gt;验证：session 1，先锁住最后一个主键，session 2 进行更新，再对最后一个主键加锁时，需要等待，session 1更新第一个主键，会报死锁错误
&lt;ul&gt;
&lt;li&gt;说明未命中索引的更新并不是先加表锁，而是先加了行锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RC级别，会提前释放不满足条件的行，是在语句执行完释放，还是在判断不满足条件后理解释放？
&lt;ul&gt;
&lt;li&gt;验证：同样可以session1锁住最后一行，session 2进行更新，where条件有不符合条件的，当阻塞在最后一行时，session 3更新被session 2释放的行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;怎么用锁实现各隔离级别&#34;&gt;怎么用锁实现各隔离级别&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;读未提交
&lt;ol&gt;
&lt;li&gt;读不加锁，写加写锁
&lt;ol&gt;
&lt;li&gt;读不加锁，但是也能保证数据的正确。例如varchar(20)，不加锁也不会读错&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;读已提交
&lt;ol&gt;
&lt;li&gt;读加读锁，读完释放，写加写锁&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可重复读
&lt;ol&gt;
&lt;li&gt;读加读锁，事务提交释放，写加写锁&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;串行化
&lt;ol&gt;
&lt;li&gt;读写都加锁&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例，有并发事务t1, t2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读未提交，读不加锁，t2更新了一行， 还未提交，t1就可以读到，t2回滚，t1脏读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读已提交，读加读锁，t2更新一行，未提交时，t2持有写锁，t1读不到，t2提交后，t1加上读锁，可以读到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复读，t1读锁提交时释放，期间t2无法修改t1读到的记录，自然实现可重复读，但是仍然会有幻读，t2可以插入新记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;串行化，都加锁，不会出现幻读&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvcc实现&#34;&gt;MVCC实现&lt;/h2&gt;
&lt;p&gt;只用锁也能实现各个隔离级别，但是并发较低&lt;/p&gt;
&lt;p&gt;写加写锁，大部分无法进行读&lt;/p&gt;
&lt;p&gt;MVCC支持写时读快照版本，增加并发&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
